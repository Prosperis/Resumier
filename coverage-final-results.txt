$ vitest run --coverage --run

 RUN  v1.6.1 C:/Users/hello/Projects/Prosperis/Resumier
      Coverage enabled with v8

 ✓ src/lib/api/__tests__/client.test.ts  (31 tests) 48ms
 ✓ src/lib/validations/__tests__/personal-info.test.ts  (27 tests) 21ms
 ✓ src/hooks/__tests__/use-toast.test.ts  (30 tests) 186ms
 ✓ src/hooks/__tests__/use-auto-save.test.ts  (22 tests) 142ms
 ❯ src/components/ui/calendar.test.tsx  (0 test)
 ✓ src/stores/__tests__/auth-store.test.ts  (23 tests) 132ms
 ✓ src/components/features/resume/preview/templates/__tests__/minimal-template.test.tsx  (41 tests) 1283ms
 ✓ src/components/features/resume/preview/templates/__tests__/classic-template.test.tsx  (42 tests) 1373ms
stderr | src/components/ui/alert-dialog.test.tsx > AlertDialog > renders with open prop controlled
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialog > renders with defaultOpen prop
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/features/resume/__tests__/resume-dashboard.test.tsx > ResumeDashboard > Empty State > shows empty state when no resumes exist
In HTML, <button> cannot be a descendant of <button>.
This will cause a hydration error.

  <ResumeDashboard>
    <div className="p-4">
      <FadeIn>
        <div data-testid="fade-in">
          <div className="rounded-lg...">
            <h3>
            <p>
            <CreateResumeDialog onSuccess={function onSuccess} trigger={<Button>}>
              <div data-testid="create-res...">
>               <button onClick={function onClick}>
                  <Button>
                    <motion.button data-slot="button" className={"inline-f..."} whileTap={{scale:0.95}} ...>
>                     <button
>                       data-slot="button"
>                       className={"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-s..."}
>                       tabIndex={0}
>                       style={{}}
>                       ref={function}
>                     >

<button> cannot contain a nested <button>.
See this log for the ancestor stack trace.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialog > calls onOpenChange when dialog state changes
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogTrigger > opens dialog when clicked
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

 ✓ src/components/features/resume/preview/templates/__tests__/modern-template.test.tsx  (46 tests) 2207ms
stderr | src/components/ui/dialog.test.tsx > Dialog > renders with open prop controlled
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > Dialog > renders with defaultOpen prop
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > Dialog > calls onOpenChange when dialog state changes
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogTrigger > opens dialog when clicked
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/tabs.test.tsx > Tabs keyboard navigation > supports arrow key navigation
An update to ForwardRef inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

stderr | src/components/ui/tabs.test.tsx > Tabs keyboard navigation > supports Home and End keys
An update to ForwardRef inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

 ✓ src/components/features/resume/__tests__/resume-dashboard.test.tsx  (25 tests) 1758ms
 ✓ src/lib/api/__tests__/errors.test.ts  (32 tests) 22ms
 ✓ src/components/ui/__tests__/breadcrumb.test.tsx  (35 tests) 469ms
 ✓ src/components/ui/tabs.test.tsx  (25 tests) 3261ms
stderr | src/components/ui/dialog.test.tsx > DialogContent > renders content correctly
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogContent > renders with custom className
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogContent > has data-slot attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogContent > renders close button
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogContent > closes dialog when close button is clicked
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/features/resume/sections/__tests__/basic-info-section.test.tsx > BasicInfoSection > Save Button > calls onSave when save button is clicked
Not implemented: HTMLFormElement's requestSubmit() method

 ✓ src/app/__tests__/theme-provider.test.tsx  (21 tests) 163ms
 ✓ src/components/features/resume/forms/__tests__/certification-list.test.tsx  (27 tests) 2498ms
stderr | src/components/features/resume/sections/__tests__/basic-info-section.test.tsx > BasicInfoSection > Save Button > calls onSave when form is submitted
Not implemented: HTMLFormElement's requestSubmit() method

 ✓ src/components/features/resume/forms/__tests__/experience-list.test.tsx  (30 tests) 2842ms
 ✓ src/components/ui/__tests__/route-error.test.tsx  (37 tests) 2709ms
 ✓ src/components/features/resume/sections/__tests__/basic-info-section.test.tsx  (27 tests) 3135ms
stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogContent > renders content with overlay
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogContent > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogContent > applies animation classes
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogHeader > renders children correctly
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogHeader > applies flex layout classes
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogHeader > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogFooter > renders children correctly
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogFooter > applies flex layout classes
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogFooter > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogTitle > renders title text
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogTitle > applies font styling classes
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogTitle > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogAction > renders action button
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogAction > closes dialog when clicked
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

 ✓ src/lib/validations/__tests__/skills.test.ts  (35 tests) 20ms
 ✓ src/components/features/resume/sections/__tests__/skills-section.test.tsx  (35 tests) 3145ms
 ✓ src/components/features/resume/forms/__tests__/education-list.test.tsx  (33 tests) 3185ms
stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogAction > calls onClick handler
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

 ✓ src/components/ui/__tests__/progress.test.tsx  (41 tests) 444ms
 ✓ src/components/features/resume/__tests__/resume-table.test.tsx  (15 tests) 228ms
 ✓ src/components/features/navigation/__tests__/app-sidebar.test.tsx  (17 tests) 1515ms
stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogAction > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogCancel > renders cancel button
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogCancel > closes dialog when clicked
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogCancel > calls onClick handler
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogContent > renders with overlay
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogHeader > renders children correctly
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogHeader > has data-slot attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogHeader > applies flex layout classes
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogHeader > renders with custom className
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogFooter > renders children correctly
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogFooter > has data-slot attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogFooter > applies flex layout classes
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogFooter > renders with custom className
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogTitle > renders title text
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogTitle > has data-slot attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogTitle > applies font styling classes
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogTitle > renders with custom className
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogClose > closes dialog when clicked
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

 ✓ src/components/features/resume/forms/__tests__/link-list.test.tsx  (31 tests) 4244ms
stderr | src/components/ui/alert-dialog.test.tsx > AlertDialogCancel > renders with custom className
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogClose > has data-slot attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > DialogClose > can be a custom button
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/alert-dialog.test.tsx > AlertDialog accessibility > supports keyboard navigation
`AlertDialogContent` requires a description for the component to be accessible for screen reader users.

You can add a description to the `AlertDialogContent` by passing a `AlertDialogDescription` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an `id` and passing the same value to the `aria-describedby` prop in `AlertDialogContent`. If the description is confusing or duplicative for sighted users, you can use the `@radix-ui/react-visually-hidden` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {AlertDialogContent}.

stderr | src/components/ui/dialog.test.tsx > Dialog accessibility > has proper role attribute
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

 ✓ src/components/ui/alert-dialog.test.tsx  (31 tests) 5980ms
stderr | src/components/ui/dialog.test.tsx > Dialog accessibility > supports keyboard navigation
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

stderr | src/components/ui/dialog.test.tsx > Dialog accessibility > traps focus within dialog
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.

 ✓ src/components/ui/dialog.test.tsx  (37 tests) 5063ms
 ✓ src/components/ui/__tests__/loading-spinner.test.tsx  (31 tests) 337ms
 ✓ src/stores/__tests__/ui-store.test.ts  (18 tests) 134ms
 ✓ src/hooks/api/use-duplicate-resume.test.tsx  (10 tests) 684ms
 ✓ src/components/ui/__tests__/sheet.test.tsx  (25 tests) 213ms
stderr | src/hooks/api/use-update-resume.test.tsx > useUpdateResume > handles error when update fails
Failed to update resume: Error: Update failed
    at C:\Users\hello\Projects\Prosperis\Resumier\src\hooks\api\use-update-resume.test.tsx:155:19
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

stderr | src/hooks/api/use-update-resume.test.tsx > useUpdateResume > handles API errors correctly
Failed to update resume: Error: Update failed
    at C:\Users\hello\Projects\Prosperis\Resumier\src\hooks\api\use-update-resume.test.tsx:193:19
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

stderr | src/components/features/navigation/__tests__/nav-main.test.tsx > NavMain > Rendering > renders the Navigation label
React does not recognize the `activeProps` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `activeprops` instead. If you accidentally passed it from a parent component, remove it from the DOM element.
React does not recognize the `asChild` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `aschild` instead. If you accidentally passed it from a parent component, remove it from the DOM element.
React does not recognize the `defaultOpen` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `defaultopen` instead. If you accidentally passed it from a parent component, remove it from the DOM element.

 ✓ src/components/features/navigation/__tests__/nav-main.test.tsx  (18 tests) 1692ms
 ✓ src/hooks/api/use-update-resume.test.tsx  (7 tests) 596ms
stderr | src/components/ui/animated-icon.test.tsx > RotateOnHover > renders children
React does not recognize the `whileHover` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `whilehover` instead. If you accidentally passed it from a parent component, remove it from the DOM element.

stderr | src/components/ui/animated-icon.test.tsx > ScaleOnHover > renders children
React does not recognize the `whileTap` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `whiletap` instead. If you accidentally passed it from a parent component, remove it from the DOM element.

 ✓ src/components/ui/animated-icon.test.tsx  (26 tests) 171ms
 ✓ src/components/ui/animated-feedback.test.tsx  (33 tests) 246ms
 ✓ src/components/features/navigation/__tests__/nav-projects.test.tsx  (30 tests) 7550ms
 ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx  (21 tests | 21 failed) 314ms
   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > renders dialog trigger button
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > renders dialog content
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > has Settings title
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > has dialog description
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Navigation Menu > renders all navigation items
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Navigation Menu > renders navigation icons
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Breadcrumb > renders breadcrumb with Settings
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Breadcrumb > renders breadcrumb with Messages & media
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Content Area > renders placeholder content
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Content Area > has scrollable content area
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Dialog State > opens dialog by default
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Dialog State > renders sidebar
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > has sr-only title for screen readers
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > has accessible description
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > dialog trigger is a button
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > applies correct content classes
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > has correct main element structure
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > has header with correct classes
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > renders sidebar with correct attributes
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > sidebar has menu items
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ❯ src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > has active state on Messages & media
     → [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 ✓ src/routes/__tests__/settings.test.tsx  (22 tests) 1195ms
stderr | src/components/features/auth/__tests__/login-form.test.tsx > LoginForm > Error Handling > does not navigate on failed login
Login failed: Error: Login failed
    at C:\Users\hello\Projects\Prosperis\Resumier\src\components\features\auth\__tests__\login-form.test.tsx:342:35
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7

 ✓ src/hooks/api/use-create-resume.test.tsx  (7 tests) 378ms
stderr | src/hooks/api/use-delete-resume.test.tsx > useDeleteResume > handles error correctly
Failed to delete resume: Error: Delete failed
    at C:\Users\hello\Projects\Prosperis\Resumier\src\hooks\api\use-delete-resume.test.tsx:100:19
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

stderr | src/hooks/api/use-delete-resume.test.tsx > useDeleteResume > handles error when deletion fails
Failed to delete resume: Error: Network error
    at C:\Users\hello\Projects\Prosperis\Resumier\src\hooks\api\use-delete-resume.test.tsx:172:19
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

stderr | src/hooks/api/use-delete-resume.test.tsx > useDeleteResume > invalidates queries even on error
Failed to delete resume: Error: Delete failed
    at C:\Users\hello\Projects\Prosperis\Resumier\src\hooks\api\use-delete-resume.test.tsx:189:19
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:135:14
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:60:26
    at runTest (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:781:17)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runSuite (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:909:15)
    at runFiles (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:958:5)
    at startTests (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/@vitest/runner/dist/index.js:967:3)
    at file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7
    at withEnv (file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:83:5)

 ✓ src/routes/__tests__/index.test.tsx  (23 tests) 3323ms
 ✓ src/hooks/api/use-delete-resume.test.tsx  (8 tests) 668ms
 ✓ src/components/ui/__tests__/skeleton.test.tsx  (22 tests) 403ms
 ✓ src/components/ui/tooltip.test.tsx  (18 tests) 3787ms
 ✓ src/app/__tests__/query-client.test.ts  (22 tests) 15ms
 ✓ src/components/ui/__tests__/route-loading.test.tsx  (24 tests) 356ms
 ✓ src/components/features/navigation/__tests__/app-header.test.tsx  (19 tests) 2219ms
 ✓ src/routes/__tests__/login.test.tsx  (19 tests) 760ms
 ✓ src/components/features/resume/sections/__tests__/education-section.test.tsx  (18 tests) 2972ms
 ✓ src/components/features/resume/sections/__tests__/links-section.test.tsx  (20 tests) 3125ms
 ✓ src/components/features/navigation/__tests__/nav-user.test.tsx  (30 tests) 10656ms
 ✓ src/stores/__tests__/theme-store.test.ts  (15 tests) 112ms
 ✓ src/components/ui/avatar.test.tsx  (17 tests) 202ms
 ✓ src/app/__tests__/providers.test.tsx  (11 tests) 181ms
stderr | src/components/ui/animated-badge.test.tsx > NotificationBadge > renders with count within max
Received `true` for a non-boolean attribute `animated`.

If you want to write it to the DOM, pass a string instead: animated="true" or animated={value.toString()}.

 ✓ src/components/ui/animated-badge.test.tsx  (25 tests) 217ms
 ✓ src/components/features/resume/mutations/__tests__/delete-resume-dialog.test.tsx  (11 tests) 4339ms
 ✓ src/components/features/resume/mutations/__tests__/rename-resume-dialog.test.tsx  (14 tests) 8727ms
 ✓ src/hooks/use-resume-store.test.ts  (9 tests) 19ms
 ✓ src/components/features/auth/__tests__/login-form.test.tsx  (39 tests) 12687ms
 ✓ src/components/ui/__tests__/dropdown-menu.test.tsx  (17 tests) 397ms
 ✓ src/components/features/resume/forms/__tests__/personal-info-form.test.tsx  (47 tests) 12957ms
 ✓ src/routes/__tests__/dashboard.test.tsx  (10 tests) 495ms
stderr | file:\C:\Users\hello\Projects\Prosperis\Resumier\node_modules\@tanstack\router-devtools\src\index.tsx:1:9
[@tanstack/router-devtools] This package has moved to @tanstack/react-router-devtools. Please switch to the new package at your earliest convenience, as this package will be dropped in the next major version release.

 ✓ src/components/features/resume/mutations/__tests__/create-resume-dialog.test.tsx  (10 tests) 6381ms
 ✓ src/components/features/navigation/__tests__/nav-secondary.test.tsx  (10 tests) 721ms
 ✓ src/hooks/api/use-resume.test.tsx  (6 tests) 459ms
 ✓ src/components/ui/textarea.test.tsx  (17 tests) 1295ms
 ✓ src/components/ui/separator.test.tsx  (11 tests) 308ms
 ✓ src/hooks/api/use-resumes.test.tsx  (5 tests) 360ms
 ✓ src/hooks/use-theme.test.ts  (6 tests) 57ms
 ✓ src/components/features/resume/sections/__tests__/certifications-section.test.tsx  (14 tests) 2190ms
 ✓ src/components/ui/select.test.tsx  (10 tests) 930ms
 ✓ src/components/ui/label.test.tsx  (8 tests) 274ms
 ✓ src/components/features/resume/__tests__/pdf-viewer.test.tsx  (7 tests) 152ms
stdout | src/test-mocks.test.tsx > Mock verification > window.matchMedia returns correct object
typeof window.matchMedia: function
window.matchMedia: [Function: spy] {
  getMockName: [Function (anonymous)],
  mockName: [Function (anonymous)],
  mockClear: [Function (anonymous)],
  mockReset: [Function (anonymous)],
  mockRestore: [Function (anonymous)],
  getMockImplementation: [Function (anonymous)],
  mockImplementation: [Function (anonymous)],
  mockImplementationOnce: [Function (anonymous)],
  withImplementation: [Function: withImplementation],
  mockReturnThis: [Function (anonymous)],
  mockReturnValue: [Function (anonymous)],
  mockReturnValueOnce: [Function (anonymous)],
  mockResolvedValue: [Function (anonymous)],
  mockResolvedValueOnce: [Function (anonymous)],
  mockRejectedValue: [Function (anonymous)],
  mockRejectedValueOnce: [Function (anonymous)]
}
result: {
  matches: false,
  media: '(prefers-reduced-motion)',
  onchange: null,
  addEventListener: [Function: spy] {
    getMockName: [Function (anonymous)],
    mockName: [Function (anonymous)],
    mockClear: [Function (anonymous)],
    mockReset: [Function (anonymous)],
    mockRestore: [Function (anonymous)],
    getMockImplementation: [Function (anonymous)],
    mockImplementation: [Function (anonymous)],
    mockImplementationOnce: [Function (anonymous)],
    withImplementation: [Function: withImplementation],
    mockReturnThis: [Function (anonymous)],
    mockReturnValue: [Function (anonymous)],
    mockReturnValueOnce: [Function (anonymous)],
    mockResolvedValue: [Function (anonymous)],
    mockResolvedValueOnce: [Function (anonymous)],
    mockRejectedValue: [Function (anonymous)],
    mockRejectedValueOnce: [Function (anonymous)]
  },
  removeEventListener: [Function: spy] {
    getMockName: [Function (anonymous)],
    mockName: [Function (anonymous)],
    mockClear: [Function (anonymous)],
    mockReset: [Function (anonymous)],
    mockRestore: [Function (anonymous)],
    getMockImplementation: [Function (anonymous)],
    mockImplementation: [Function (anonymous)],
    mockImplementationOnce: [Function (anonymous)],
    withImplementation: [Function: withImplementation],
    mockReturnThis: [Function (anonymous)],
    mockReturnValue: [Function (anonymous)],
    mockReturnValueOnce: [Function (anonymous)],
    mockResolvedValue: [Function (anonymous)],
    mockResolvedValueOnce: [Function (anonymous)],
    mockRejectedValue: [Function (anonymous)],
    mockRejectedValueOnce: [Function (anonymous)]
  },
  addListener: [Function: spy] {
    getMockName: [Function (anonymous)],
    mockName: [Function (anonymous)],
    mockClear: [Function (anonymous)],
    mockReset: [Function (anonymous)],
    mockRestore: [Function (anonymous)],
    getMockImplementation: [Function (anonymous)],
    mockImplementation: [Function (anonymous)],
    mockImplementationOnce: [Function (anonymous)],
    withImplementation: [Function: withImplementation],
    mockReturnThis: [Function (anonymous)],
    mockReturnValue: [Function (anonymous)],
    mockReturnValueOnce: [Function (anonymous)],
    mockResolvedValue: [Function (anonymous)],
    mockResolvedValueOnce: [Function (anonymous)],
    mockRejectedValue: [Function (anonymous)],
    mockRejectedValueOnce: [Function (anonymous)]
  },
  removeListener: [Function: spy] {
    getMockName: [Function (anonymous)],
    mockName: [Function (anonymous)],
    mockClear: [Function (anonymous)],
    mockReset: [Function (anonymous)],
    mockRestore: [Function (anonymous)],
    getMockImplementation: [Function (anonymous)],
    mockImplementation: [Function (anonymous)],
    mockImplementationOnce: [Function (anonymous)],
    withImplementation: [Function: withImplementation],
    mockReturnThis: [Function (anonymous)],
    mockReturnValue: [Function (anonymous)],
    mockReturnValueOnce: [Function (anonymous)],
    mockResolvedValue: [Function (anonymous)],
    mockResolvedValueOnce: [Function (anonymous)],
    mockRejectedValue: [Function (anonymous)],
    mockRejectedValueOnce: [Function (anonymous)]
  },
  dispatchEvent: [Function: spy] {
    getMockName: [Function (anonymous)],
    mockName: [Function (anonymous)],
    mockClear: [Function (anonymous)],
    mockReset: [Function (anonymous)],
    mockRestore: [Function (anonymous)],
    getMockImplementation: [Function (anonymous)],
    mockImplementation: [Function (anonymous)],
    mockImplementationOnce: [Function (anonymous)],
    withImplementation: [Function: withImplementation],
    mockReturnThis: [Function (anonymous)],
    mockReturnValue: [Function (anonymous)],
    mockReturnValueOnce: [Function (anonymous)],
    mockResolvedValue: [Function (anonymous)],
    mockResolvedValueOnce: [Function (anonymous)],
    mockRejectedValue: [Function (anonymous)],
    mockRejectedValueOnce: [Function (anonymous)]
  }
}

 ✓ src/components/ui/use-sidebar.test.tsx  (3 tests) 38ms
 ✓ src/test-mocks.test.tsx  (4 tests) 6ms
 ✓ src/lib/utils.test.ts  (5 tests) 15ms
 ✓ src/debug2.test.ts  (1 test) 4ms
 ✓ src/components/ui/checkbox.test.tsx  (10 tests) 938ms
 ✓ src/components/ui/input.test.tsx  (16 tests) 910ms
 ✓ src/components/ui/card.test.tsx  (7 tests) 101ms
 ✓ src/app/__tests__/router.test.ts  (23 tests) 12ms
 ✓ src/hooks/use-mobile.test.ts  (4 tests) 28ms
 ✓ src/components/features/resume/sections/__tests__/experience-section.test.tsx  (42 tests) 16079ms
 ✓ src/components/features/navigation/__tests__/theme-toggle.test.tsx  (9 tests) 924ms
stdout | src/matcher-test.test.tsx > jest-dom matchers test > should have toBeInTheDocument matcher
expect object keys: [
  'fail',
  'extend',
  'addSnapshotSerializer',
  'anything',
  'any',
  'stringContaining',
  'objectContaining',
  'arrayContaining',
  'stringMatching',
  'closeTo',
  'not',
  'getState',
  'setState',
  'addEqualityTesters',
  'soft',
  'unreachable',
  'assertions',
  'hasAssertions',
  'toAppearAfter',
  'toAppearBefore',
  'toBeChecked',
  'toBeDisabled',
  'toBeEmpty',
  'toBeEmptyDOMElement',
  'toBeEnabled',
  'toBeInTheDOM',
  'toBeInTheDocument',
  'toBeInvalid',
  'toBePartiallyChecked',
  'toBePartiallyPressed',
  'toBePressed',
  'toBeRequired',
  'toBeValid',
  'toBeVisible',
  'toContainElement',
  'toContainHTML',
  'toHaveAccessibleDescription',
  'toHaveAccessibleErrorMessage',
  'toHaveAccessibleName',
  'toHaveAttribute',
  'toHaveClass',
  'toHaveDescription',
  'toHaveDisplayValue',
  'toHaveErrorMessage',
  'toHaveFocus',
  'toHaveFormValues',
  'toHaveRole',
  'toHaveSelection',
  'toHaveStyle',
  'toHaveTextContent',
  'toHaveValue'
]
Has toBeInTheDocument? function

 ✓ src/matcher-test.test.tsx  (1 test) 37ms
 ✓ src/components/ui/badge.test.tsx  (7 tests) 86ms
 ✓ src/debug.test.ts  (1 test) 3ms
 ✓ src/components/ui/button.test.tsx  (6 tests) 76ms
 ✓ src/components/features/resume/forms/__tests__/skills-form.test.tsx  (40 tests) 16480ms
 ✓ src/components/features/resume/forms/__tests__/link-form-dialog.test.tsx  (36 tests) 17359ms
 ✓ src/components/features/resume/forms/__tests__/certification-form-dialog.test.tsx  (35 tests) 20129ms
 ✓ src/components/features/resume/__tests__/resume-builder.test.tsx  (46 tests) 20755ms
 ✓ src/components/features/resume/forms/__tests__/experience-form-dialog.test.tsx  (34 tests) 21732ms
 ✓ src/components/features/resume/forms/__tests__/education-form-dialog.test.tsx  (41 tests) 26590ms

⎯⎯⎯⎯⎯⎯ Failed Suites 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/ui/calendar.test.tsx [ src/components/ui/calendar.test.tsx ]
Error: Cannot find module 'C:\Users\hello\Projects\Prosperis\Resumier\node_modules\date-fns\index.js' imported from C:\Users\hello\Projects\Prosperis\Resumier\node_modules\react-day-picker\dist\esm\classes\DateLib.js
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { code: 'ERR_MODULE_NOT_FOUND', url: 'file:///C:/Users/hello/Projects/Prosperis/Resumier/node_modules/date-fns/index.js' }
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/22]⎯

⎯⎯⎯⎯⎯⎯ Failed Tests 21 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > renders dialog trigger button
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > renders dialog content
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > has Settings title
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Rendering > has dialog description
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Navigation Menu > renders all navigation items
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Navigation Menu > renders navigation icons
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Breadcrumb > renders breadcrumb with Settings
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Breadcrumb > renders breadcrumb with Messages & media
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Content Area > renders placeholder content
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Content Area > has scrollable content area
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Dialog State > opens dialog by default
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Dialog State > renders sidebar
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > has sr-only title for screen readers
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > has accessible description
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Accessibility > dialog trigger is a button
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > applies correct content classes
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > has correct main element structure
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Layout > has header with correct classes
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > renders sidebar with correct attributes
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > sidebar has menu items
 FAIL  src/components/features/settings/__tests__/settings-dialog.test.tsx > SettingsDialog > Sidebar > has active state on Messages & media
Error: [vitest] No "X" export is defined on the "lucide-react" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

vi.mock("lucide-react", async (importOriginal) => {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ DialogContent src/components/ui/dialog.tsx:77:14

 ❯ Object.react_stack_bottom_frame node_modules/react-dom/cjs/react-dom-client.development.js:25904:20
 ❯ renderWithHooks node_modules/react-dom/cjs/react-dom-client.development.js:7662:22
 ❯ updateFunctionComponent node_modules/react-dom/cjs/react-dom-client.development.js:10166:19
 ❯ beginWork node_modules/react-dom/cjs/react-dom-client.development.js:11778:18
 ❯ runWithFiberInDEV node_modules/react-dom/cjs/react-dom-client.development.js:874:13
 ❯ performUnitOfWork node_modules/react-dom/cjs/react-dom-client.development.js:17641:22
 ❯ workLoopSync node_modules/react-dom/cjs/react-dom-client.development.js:17469:41

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/22]⎯

 Test Files  2 failed | 91 passed (93)
      Tests  21 failed | 1936 passed (1957)
   Start at  12:10:43
   Duration  33.77s (transform 10.83s, setup 33.21s, collect 132.71s, tests 283.63s, environment 189.65s, prepare 47.28s)

error: script "test" exited with code 1
